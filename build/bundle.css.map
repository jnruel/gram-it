{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../App.svelte",
    "../../Ingredient.svelte",
    "../../IngredientsTable.svelte",
    "../../Recipe.svelte",
    "../../RecipeIngredient.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import IngredientsTable from './components/IngredientsTable.svelte';\n  import Recipe from './components/Recipe.svelte';\n</script>\n\n<style>\n  .content {\n    display: flex;\n  }\n</style>\n\n<main>\n\t<h1>Gram-It</h1>\n  <h2>Ingredient volume to weight conversion</h2>\n  <div class=\"content\">\n    <IngredientsTable />\n    <Recipe />\n  </div>\n</main>\n",
    "<script>\n  import { recipe, ingredientsStore } from '../stores.js';\n  export let ingredient;\n\n  let editing = false;\n  let inRecipe = false;\n\n  function addToRecipe() {\n    if (!ingredient.inRecipe) {\n      recipe.update(recipe => {\n        return [...recipe, JSON.parse(JSON.stringify(ingredient))];\n      });\n\n      const index = $ingredientsStore.map(ing => ing.id).indexOf(ingredient.id);\n      $ingredientsStore[index].inRecipe = true;\n    }\n  }\n</script>\n\n<style>\n  .ingredient:not(.added):hover {\n    background-color: black;\n    color: white;\n    cursor: pointer;\n  }\n\n  .ingredient.added {\n    background-color: gray;\n  }\n\n  td {\n    border-bottom: 1px solid black;\n    padding: 10px 5px;\n  }\n</style>\n\n<tr on:click={addToRecipe} class=\"ingredient {ingredient.inRecipe ? 'added' : ''}\">\n  <td>{ingredient.name}</td>\n  <td>{ingredient.volume.amount} {ingredient.volume.type}</td>\n  <td>{ingredient.grams}</td>\n</tr>\n",
    "<script>\n  import { filteredIngredientsStore } from '../stores.js';\n  import Ingredient from './Ingredient.svelte';\n  import IngredientsFilter from './IngredientsFilter.svelte';\n</script>\n\n<style>\n  :global(table) {\n    border-collapse: collapse;\n  }\n\n  :global(th) {\n    text-align: left;\n  }\n\n  .ingredients-table {\n    width: 50%;\n    margin-right: 25px;\n  }\n</style>\n\n<div class=\"ingredients-table\">\n\t<h2>Ingredients</h2>\n  <IngredientsFilter />\n  <table>\n    <tr>\n      <th>Ingredient</th>\n      <th>Volume</th>\n      <th>Weight (Grams)</th>\n    </tr>\n    {#each $filteredIngredientsStore as ingredient}\n      <Ingredient ingredient={ingredient} />\n    {/each}\n  </table>\n</div>\n",
    "<script>\n  import { recipe } from '../stores.js';\n  import RecipeIngredient from './RecipeIngredient.svelte';\n</script>\n\n<style>\n  .recipe {\n    width: 50%;\n  }\n</style>\n\n<div class=\"recipe\">\n\t<h2>Saved Ingredients</h2>\n  <div class=\"recipe-ingredients\">\n    {#each $recipe as ingredient}\n      <RecipeIngredient ingredient={ingredient} />\n    {/each}\n  </div>\n</div>\n",
    "<script>\n  import { recipe, ingredientsStore } from '../stores.js';\n  import volumeConversion from '../volumeConversion.js';\n  import SelectVolume from './SelectVolume.svelte';\n\n  export let ingredient;\n\n  let tempVolumeAmount = ingredient.volume.amount;\n\n  let editing = false;\n  let thisIngredient = JSON.parse(JSON.stringify(ingredient));\n\n  /**\n   * Remove ingredient from recipe store.\n   */\n  function remove() {\n    recipe.update(recipe => {\n      return recipe.filter(ing => ing.id !== ingredient.id);\n    });\n\n    // Get index of this ingredient in ingredients store\n    const index = $ingredientsStore.map(ing => ing.id).indexOf(ingredient.id);\n    $ingredientsStore[index].inRecipe = false;\n  }\n\n  /**\n   * Start editing ingredient.\n   */\n  function edit() {\n    editing = true;\n  }\n\n  /**\n   * Update recipe store's ingredient with new values.\n   */\n  function save() {\n    // update grams\n    // TODO: only do if volume amount is changed?\n    const gramConversionFactor = tempVolumeAmount / thisIngredient.volume.amount;\n    thisIngredient.grams = (thisIngredient.grams * gramConversionFactor).toFixed(2);\n\n    // Get index of this ingredient in recipe store\n    const index = $recipe.map(ing => ing.id).indexOf(ingredient.id);\n\n    $recipe[index].volume.amount = thisIngredient.volume.amount;\n    $recipe[index].volume.type = thisIngredient.volume.type;\n    $recipe[index].grams = thisIngredient.grams;\n\n    ingredient = JSON.parse(JSON.stringify(thisIngredient));\n    tempVolumeAmount = ingredient.volume.amount;\n    editing = false;\n  }\n\n  /**\n   * Cancel editing of ingredient, revert values.\n   */\n  function cancel() {\n    thisIngredient = JSON.parse(JSON.stringify(ingredient));\n    tempVolumeAmount = thisIngredient.volume.amount;\n    editing = false;\n  }\n\n  /**\n   * Handle volume amount change\n   */\n  function handleVolAmountChange() {\n    const gramConversionFactor = tempVolumeAmount / thisIngredient.volume.amount;\n\n    if (tempVolumeAmount > 0 && !isNaN(tempVolumeAmount)) {\n      thisIngredient.grams = (thisIngredient.grams * gramConversionFactor).toFixed(2);\n      thisIngredient.volume.amount = tempVolumeAmount;\n    }\n  }\n\n  /**\n   * Handle dispatched event from SelectVolume component\n   * - Sets new component state for new selected volume type\n   * - calculate conversion factor based on old and new types\n   * - set new component state for volume amount\n   */\n  function handleVolTypeChange(event) {\n    let newType = event.detail;\n    let prevType = thisIngredient.volume.type\n\n    // Convert volume amount by type\n    const conversionFactor = volumeConversion[newType] / volumeConversion[prevType];\n\n    thisIngredient.volume.amount = tempVolumeAmount * conversionFactor;\n    thisIngredient.volume.type = newType;\n    tempVolumeAmount = thisIngredient.volume.amount;\n  }\n</script>\n\n<style>\n  .recipe-ingredient {\n    margin-bottom: 10px;\n  }\n\n  .input-volume-amount {\n    width: 65px;\n  }\n\n  .name {\n    font-weight: bold;\n  }\n\n  .info {\n    display: flex;\n    align-items: center;\n  }\n\n  .amount {\n    margin-right: 10px;\n  }\n\n  .actions button {\n    margin: 0;\n\n  }\n</style>\n\n<div class=\"recipe-ingredient\">\n  <div class=\"name\">{ingredient.name}</div>\n  <div class=\"info\">\n    {#if !editing}\n      <div class=\"amount\">\n        <span>{thisIngredient.grams} grams</span>\n        <span>({thisIngredient.volume.amount} {thisIngredient.volume.type})</span>\n      </div>\n      <div class=\"actions\">\n        <button type=\"button\" on:click={edit}>Edit</button>\n        <button on:click={remove}>Remove</button>\n      </div>\n    {:else}\n      <input\n        class=\"input-volume-amount\"\n        min=\"0\"\n        type=\"number\"\n        step=\"0.01\"\n        bind:value={tempVolumeAmount}\n        on:change={handleVolAmountChange}\n      />\n      <SelectVolume selectedType={thisIngredient.volume.type} on:notify={handleVolTypeChange}/>\n      <div class=\"actions\">\n        <button on:click={save}>Save</button>\n        <button on:click={cancel}>Cancel</button>\n      </div>\n    {/if}\n  </div>\n</div>\n"
  ],
  "names": [],
  "mappings": "AAME,QAAQ,cAAC,CAAC,AACR,OAAO,CAAE,IAAI,AACf,CAAC;ACYD,yBAAW,KAAK,MAAM,CAAC,MAAM,AAAC,CAAC,AAC7B,gBAAgB,CAAE,KAAK,CACvB,KAAK,CAAE,KAAK,CACZ,MAAM,CAAE,OAAO,AACjB,CAAC,AAED,WAAW,MAAM,cAAC,CAAC,AACjB,gBAAgB,CAAE,IAAI,AACxB,CAAC,AAED,EAAE,cAAC,CAAC,AACF,aAAa,CAAE,GAAG,CAAC,KAAK,CAAC,KAAK,CAC9B,OAAO,CAAE,IAAI,CAAC,GAAG,AACnB,CAAC;AC1BO,KAAK,AAAE,CAAC,AACd,eAAe,CAAE,QAAQ,AAC3B,CAAC,AAEO,EAAE,AAAE,CAAC,AACX,UAAU,CAAE,IAAI,AAClB,CAAC,AAED,kBAAkB,eAAC,CAAC,AAClB,KAAK,CAAE,GAAG,CACV,YAAY,CAAE,IAAI,AACpB,CAAC;ACZD,OAAO,cAAC,CAAC,AACP,KAAK,CAAE,GAAG,AACZ,CAAC;ACsFD,kBAAkB,4BAAC,CAAC,AAClB,aAAa,CAAE,IAAI,AACrB,CAAC,AAED,oBAAoB,4BAAC,CAAC,AACpB,KAAK,CAAE,IAAI,AACb,CAAC,AAED,KAAK,4BAAC,CAAC,AACL,WAAW,CAAE,IAAI,AACnB,CAAC,AAED,KAAK,4BAAC,CAAC,AACL,OAAO,CAAE,IAAI,CACb,WAAW,CAAE,MAAM,AACrB,CAAC,AAED,OAAO,4BAAC,CAAC,AACP,YAAY,CAAE,IAAI,AACpB,CAAC,AAED,sBAAQ,CAAC,MAAM,cAAC,CAAC,AACf,MAAM,CAAE,CAAC,AAEX,CAAC"
}